version: '3.9'

services:
  nginx:
    image: nginx:1.21
    restart: always
    ports:
      - 80:80
      - 443:443
    depends_on:
      - upload_service
      - download_service
    volumes:
      - ./etc/nginx:/etc/nginx

  db:
    image: mongo:5.0
    restart: on-failure
    ports:
      - 27017:27017
    volumes:
      - db:/data/db
    env_file:
      - mongodb.env

  minio:
    image: bitnami/minio:latest
    restart: on-failure
    ports:
      - 9000:9000
      - 9001:9001
    env_file:
      - minio.env
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 10s
      timeout: 20s
      retries: 5

  upload_service:
    image: ghcr.io/opnsnap/upload-service:main
    restart: on-failure
    expose:
      - 8080
    env_file:
      - minio.env
    depends_on:
      minio:
        condition: service_healthy

  download_service:
    image: ghcr.io/opnsnap/download-service:main
    restart: on-failure
    expose:
      - 8080
    env_file:
      - minio.env
    depends_on:
      minio:
        condition: service_healthy

  # es01:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.1.2
  #   container_name: es01
  #   ports:
  #     - 9200:9200
  #   # environment:
  #   #   - node.name=es01
  #   #   - bootstrap.memory_lock=true
  #   #   - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   # ulimits:
  #   #   memlock:
  #   #     soft: -1
  #   #     hard: -1
  #   env_file:
  #     - elastic.env
  #   volumes:
  #     - elastic_data:/usr/share/elasticsearch/data
  #   networks:
  #     - elastic

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.2
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    env_file:
      - elastic.env
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.2
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    image: docker.elastic.co/kibana/kibana:8.1.2
    environment:
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: '["http://es01:9200"]'
    ports:
      - 5601:5601
    networks:
      - elastic
    depends_on:
      - es01

volumes:
  db: {}
  elastic_data: {}
  certs: {}
  esdata01: {}
networks:
  elastic:
    driver: bridge
